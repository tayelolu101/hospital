
 <input type="hidden" id="csrfPreventionSalt" value="<%=request.getAttribute("csrfPreventionSalt")%>" name="csrfPreventionSalt"/>


<meta name="csrf-token" content="<%= request.getAttribute("csrfPreventionSalt")%>"/>


 var  token = document.head.querySelector('meta[name="csrf-token"]');
  
    if(!!token){
    	 window.xrftoken = token.content; 	
    	 //console.log(window.xrftoken);
    	 $.ajaxSetup({
    		  headers: {
    		    'X-CSRF-TOKEN': token.content
    		  }
    		});
    	
    }else{
    	
    	console.log("CSRF token not found: ")
    }



package com.zenithbank.banking.coporate.ibank.servlet.login;

import java.io.IOException;
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.List;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.common.cache.Cache;
import com.zenithbank.stringhelper.JSONException;
import com.zenithbank.stringhelper.JSONObject;




/**
 * Servlet Filter implementation class CSRFTokenValidatorFilter
 */
//@WebFilter("/CSRFTokenValidatorFilter")
public class CSRFTokenValidatorFilter implements Filter {

	private List<String> excludeMethods = Arrays.asList("GET"); 
    /**
     * Default constructor. 
     */
    public CSRFTokenValidatorFilter() {
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see Filter#destroy()
	 */
	public void destroy() {
		// TODO Auto-generated method stub
	}

	/**
	 * @see Filter#doFilter(ServletRequest, ServletResponse, FilterChain)
	 */
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
		//System.out.println("===================token validator====================== ");
        // Assume its HTTP
        HttpServletRequest httpReq = (HttpServletRequest) request;
        
        HttpServletResponse httpRes  = (HttpServletResponse)response;

        String requestMethod  = httpReq.getMethod().toUpperCase();
        Boolean excludeMethod  = excludeMethods.contains(requestMethod);
        if(excludeMethod){
            chain.doFilter(request, response);
            return;
        }
        
        // Get the salt sent with the request
        
        String salt  = httpReq.getHeader("X-CSRF-TOKEN");
        salt = (salt == null) ? (String) httpReq.getParameter("csrfPreventionSalt"): salt;

        // Validate that the salt is in the cache
        @SuppressWarnings("unchecked")
    			Cache<String, Boolean> csrfPreventionSaltCache = (Cache<String, Boolean>)
    	        httpReq.getSession().getAttribute("csrfPreventionSaltCache");
        
       // System.out.println("csrfPreventionSaltCache " + csrfPreventionSaltCache);
       // System.out.println("csrfPreventionSaltCache salt " +   csrfPreventionSaltCache.asMap().getOrDefault(salt,null) );
        
        
        if (csrfPreventionSaltCache != null &&
                salt != null &&
                csrfPreventionSaltCache.asMap().getOrDefault(salt,null) != null){
        	//System.out.println("valid request with salt " + salt);
            // If the salt is in the cache, we move on
            chain.doFilter(request, response);
        } else {
        	//System.out.println("invalid request");
            // Otherwise we throw an exception aborting the request flow
        	String acceptHeader  = httpReq.getHeader("Accept"); 
        	String contentTypeHeader  = httpReq.getHeader("Content-Type"); 
    	    boolean ajax = "XMLHttpRequest".equals(
    	    		
                     httpReq.getHeader("X-Requested-With"));
    	  
        	if( ajax
    			|| (acceptHeader != null && acceptHeader.equalsIgnoreCase("application/json"))
    			|| (contentTypeHeader != null && contentTypeHeader.equalsIgnoreCase("application/json"))
        	){
        		
        	
    		    JSONObject jsObject = new JSONObject();
                try {
					 jsObject.put("message", "Invalid Request");
					 
			
					 
					
				} catch (JSONException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
       		 
				 httpRes.setContentType("application/json");
				 
				 httpRes.sendError(403, "Unauthorised");
                httpRes.getWriter().println(jsObject);
        		//return;
        	}else{
        		String contextPath = httpReq.getContextPath();
            	
            	httpReq.getSession().setAttribute("error", "Invalid Request. Try Signin in!.");
            	
            	httpRes.sendRedirect(contextPath+"/VascoLogin");	
        		
        		
        	}
        	
        	//TODO redirect to home page with session message... saying session expired or invalid request
            //throw new ServletException("Potential CSRF detected!! Inform a scary sysadmin ASAP.");
        }
       
		
	}

	/**
	 * @see Filter#init(FilterConfig)
	 */
	public void init(FilterConfig fConfig) throws ServletException {
		// TODO Auto-generated method stub
	}

}



package com.zenithbank.banking.coporate.ibank.servlet.login;

import java.io.IOException;
import java.security.SecureRandom;
import java.util.concurrent.TimeUnit;

import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.RandomStringUtils;

import com.google.common.cache.Cache;
import com.google.common.cache.CacheBuilder;
import com.google.common.cache.CacheLoader;


/**
 * Servlet Filter implementation class CSRFTokenFilter
 */

public class CSRFTokenFilter implements Filter {

    /**
     * Default constructor. 
     */
    public CSRFTokenFilter() {
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see Filter#destroy()
	 */
	public void destroy() {
		// TODO Auto-generated method stub
	}

	/**
	 * @see Filter#doFilter(ServletRequest, ServletResponse, FilterChain)
	 */
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
	
		 HttpServletRequest httpReq = (HttpServletRequest) request;
		   
		 	
		// System.out.println(httpReq.getPathInfo());

		 //System.out.println(httpReq.getServletPath());
	        // Assume its HTTP
	       // HttpServletRequest httpReq = (HttpServletRequest) request;

	        // Check the user session for the salt cache, if none is present we create one
	        @SuppressWarnings("unchecked")
			Cache<String, Boolean> csrfPreventionSaltCache = (Cache<String, Boolean>)
	        httpReq.getSession().getAttribute("csrfPreventionSaltCache");
	        

	        CacheLoader<String, Boolean> loader;
	        loader = new CacheLoader<String, Boolean>() {
	            @Override
	            public Boolean load(String key) {
	            	
	            	//System.out.println("================salt load ================");
	            	return true;
	            	// return key.toUpperCase();
	            }
	        };
	        
	        if (csrfPreventionSaltCache == null){
            	//System.out.println("================csrfPreventionSaltCache is null ================");
	            csrfPreventionSaltCache = CacheBuilder.newBuilder()
	                .maximumSize(5000)
	                .expireAfterWrite(20, TimeUnit.MINUTES).build(loader);

	            httpReq.getSession().setAttribute("csrfPreventionSaltCache", csrfPreventionSaltCache);
	        }

	        // Generate the salt and store it in the users cache
	        String salt = RandomStringUtils.random(20, 0, 0, true, true, null, new SecureRandom());
	        csrfPreventionSaltCache.asMap().put(salt, true);

	        // Add the salt to the current request so it can be used
	        // by the page rendered in this request
	        httpReq.setAttribute("csrfPreventionSalt", salt);
	       // System.out.println("================csrfPreventionSalt is "+salt+" ================");

	      //  chain.doFilter(request, response);
	

	        chain.doFilter(request, response);
	}

	/**
	 * @see Filter#init(FilterConfig)
	 */
	public void init(FilterConfig fConfig) throws ServletException {
		// TODO Auto-generated method stub
	}

}
